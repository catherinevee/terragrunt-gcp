name: 'Setup Environment'
description: 'Complete environment setup for Terraform/Terragrunt operations'
author: 'Platform Team'

inputs:
  terraform_version:
    description: 'Terraform version to install'
    required: false
    default: '1.5.7'
  terragrunt_version:
    description: 'Terragrunt version to install'
    required: false
    default: '0.52.0'
  working_directory:
    description: 'Working directory for Terragrunt'
    required: false
    default: '.'
  gcp_auth_method:
    description: 'GCP authentication method (workload-identity or service-account)'
    required: false
    default: 'workload-identity'
  gcp_service_account:
    description: 'GCP service account email (for workload identity)'
    required: false
  gcp_workload_identity_provider:
    description: 'Workload identity provider (for workload identity)'
    required: false
  gcp_service_account_key:
    description: 'GCP service account key (for service account auth)'
    required: false
  enable_cache:
    description: 'Enable caching for Terraform providers and modules'
    required: false
    default: 'true'
  cache_key_prefix:
    description: 'Cache key prefix'
    required: false
    default: 'terragrunt'

outputs:
  cache-hit:
    description: 'Whether cache was hit'
    value: ${{ steps.cache-providers.outputs.cache-hit }}

runs:
  using: 'composite'
  steps:
    # Step 1: Setup Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.terraform_version }}
        terraform_wrapper: false

    # Step 2: Setup Terragrunt
    - name: Setup Terragrunt
      shell: bash
      run: |
        wget -q https://github.com/gruntwork-io/terragrunt/releases/download/v${{ inputs.terragrunt_version }}/terragrunt_linux_amd64
        chmod +x terragrunt_linux_amd64
        sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
        terragrunt --version

    # Step 3: Authenticate to GCP
    - name: Authenticate to GCP (Workload Identity)
      if: inputs.gcp_auth_method == 'workload-identity'
      uses: google-github-actions/auth@v2
      with:
        service_account: ${{ inputs.gcp_service_account }}
        workload_identity_provider: ${{ inputs.gcp_workload_identity_provider }}

    - name: Authenticate to GCP (Service Account)
      if: inputs.gcp_auth_method == 'service-account'
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ inputs.gcp_service_account_key }}

    # Step 4: Setup gcloud CLI
    - name: Setup Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        install_components: 'gke-gcloud-auth-plugin,alpha,beta'

    # Step 5: Cache Terraform providers
    - name: Cache Terraform Providers
      if: inputs.enable_cache == 'true'
      id: cache-providers
      uses: actions/cache@v4
      with:
        path: |
          ~/.terraform.d/plugin-cache
          **/.terraform/providers
        key: ${{ inputs.cache_key_prefix }}-providers-${{ hashFiles('**/.terraform.lock.hcl') }}
        restore-keys: |
          ${{ inputs.cache_key_prefix }}-providers-

    # Step 6: Cache Terraform modules
    - name: Cache Terraform Modules
      if: inputs.enable_cache == 'true'
      uses: actions/cache@v4
      with:
        path: |
          **/.terraform/modules
          ~/.terraform.d/modules
        key: ${{ inputs.cache_key_prefix }}-modules-${{ hashFiles('**/main.tf', '**/versions.tf') }}
        restore-keys: |
          ${{ inputs.cache_key_prefix }}-modules-

    # Step 7: Cache Terragrunt
    - name: Cache Terragrunt
      if: inputs.enable_cache == 'true'
      uses: actions/cache@v4
      with:
        path: |
          **/.terragrunt-cache
          ~/.terragrunt.d
        key: ${{ inputs.cache_key_prefix }}-terragrunt-${{ hashFiles('**/terragrunt.hcl') }}
        restore-keys: |
          ${{ inputs.cache_key_prefix }}-terragrunt-

    # Step 8: Setup Terraform plugin cache
    - name: Setup Terraform Plugin Cache
      if: inputs.enable_cache == 'true'
      shell: bash
      run: |
        mkdir -p ~/.terraform.d/plugin-cache
        echo 'plugin_cache_dir = "$HOME/.terraform.d/plugin-cache"' > ~/.terraformrc

    # Step 9: Verify setup
    - name: Verify Setup
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        echo "::group::Version Information"
        echo "Terraform version: $(terraform version -json | jq -r .terraform_version)"
        echo "Terragrunt version: $(terragrunt --version)"
        echo "gcloud version: $(gcloud version --format='value(version)')"
        echo "::endgroup::"
        
        echo "::group::Authentication Status"
        gcloud auth list --format="table(account,status)"
        echo "Current project: $(gcloud config get-value project)"
        echo "::endgroup::"