name: Setup Infrastructure

on:
  workflow_dispatch:
    inputs:
      project_id:
        description: 'GCP Project ID'
        required: true
        type: string
      organization:
        description: 'Organization name'
        required: true
        default: 'yanka'
        type: string
      region:
        description: 'Primary GCP Region'
        required: true
        default: 'us-central1'
        type: string
      enable_apis:
        description: 'Enable required GCP APIs'
        required: true
        type: boolean
        default: true

env:
  TERRAFORM_VERSION: '1.5.7'
  TERRAGRUNT_VERSION: '0.52.0'

jobs:
  setup:
    name: Initial Setup
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Setup Terragrunt
        run: |
          wget -q https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt

      - name: Configure GCP Credentials
        if: ${{ env.GCP_SA_KEY != '' }}
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        if: ${{ env.GCP_SA_KEY != '' }}
        uses: google-github-actions/setup-gcloud@v2
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}

      - name: Validation Only (No Credentials)
        if: ${{ env.GCP_SA_KEY == '' }}
        run: |
          echo "🔍 Running in validation mode (no GCP credentials configured)"
          echo "✅ Setup workflow validated"
          echo ""
          echo "ℹ️ To enable actual infrastructure setup:"
          echo "   1. Configure GCP_SA_KEY secret in repository settings"
          echo "   2. Run this workflow with required inputs"
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}

      - name: Enable Required APIs
        if: ${{ env.GCP_SA_KEY != '' && inputs.enable_apis }}
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        run: |
          echo "🔧 Enabling required GCP APIs..."
          
          APIS=(
            "compute.googleapis.com"
            "container.googleapis.com"
            "sqladmin.googleapis.com"
            "cloudresourcemanager.googleapis.com"
            "iam.googleapis.com"
            "cloudkms.googleapis.com"
            "secretmanager.googleapis.com"
            "monitoring.googleapis.com"
            "logging.googleapis.com"
            "servicenetworking.googleapis.com"
            "redis.googleapis.com"
            "cloudfunctions.googleapis.com"
            "run.googleapis.com"
            "artifactregistry.googleapis.com"
          )
          
          for api in "${APIS[@]}"; do
            echo "Enabling $api..."
            gcloud services enable "$api" --project="${{ inputs.project_id }}"
          done
          
          echo "✅ All required APIs enabled"

      - name: Create State Bucket
        if: ${{ env.GCP_SA_KEY != '' }}
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        run: |
          echo "🪣 Creating Terraform state bucket..."
          
          BUCKET_NAME="terraform-state-${{ inputs.project_id }}"
          LOCATION="${{ inputs.region }}"
          
          # Check if bucket exists
          if gsutil ls -b "gs://${BUCKET_NAME}" 2>/dev/null; then
            echo "Bucket gs://${BUCKET_NAME} already exists"
          else
            # Create bucket
            gsutil mb -p "${{ inputs.project_id }}" -l "${LOCATION}" "gs://${BUCKET_NAME}"
            
            # Enable versioning
            gsutil versioning set on "gs://${BUCKET_NAME}"
            
            # Set lifecycle policy for old versions
            cat > lifecycle.json <<EOF
          {
            "lifecycle": {
              "rule": [
                {
                  "action": {"type": "Delete"},
                  "condition": {
                    "numNewerVersions": 10,
                    "isLive": false
                  }
                }
              ]
            }
          }
          EOF
            gsutil lifecycle set lifecycle.json "gs://${BUCKET_NAME}"
            
            echo "✅ State bucket created: gs://${BUCKET_NAME}"
          fi

      - name: Setup Service Accounts
        if: ${{ env.GCP_SA_KEY != '' }}
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        run: |
          echo "👤 Setting up service accounts..."
          
          # Terraform service account
          SA_NAME="terraform-sa"
          SA_EMAIL="${SA_NAME}@${{ inputs.project_id }}.iam.gserviceaccount.com"
          
          # Check if SA exists
          if gcloud iam service-accounts describe "${SA_EMAIL}" --project="${{ inputs.project_id }}" 2>/dev/null; then
            echo "Service account ${SA_EMAIL} already exists"
          else
            # Create service account
            gcloud iam service-accounts create "${SA_NAME}" \
              --display-name="Terraform Service Account" \
              --project="${{ inputs.project_id }}"
            
            # Grant necessary roles
            ROLES=(
              "roles/editor"
              "roles/resourcemanager.projectIamAdmin"
              "roles/storage.admin"
            )
            
            for role in "${ROLES[@]}"; do
              gcloud projects add-iam-policy-binding "${{ inputs.project_id }}" \
                --member="serviceAccount:${SA_EMAIL}" \
                --role="${role}"
            done
            
            echo "✅ Service account created: ${SA_EMAIL}"
          fi

      - name: Initialize Terragrunt
        if: ${{ env.GCP_SA_KEY != '' }}
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        run: |
          echo "🚀 Initializing Terragrunt..."
          cd infrastructure
          terragrunt init --terragrunt-non-interactive
          echo "✅ Terragrunt initialized successfully"

      - name: Summary
        run: |
          echo "## 📋 Infrastructure Setup Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Project ID**: ${{ inputs.project_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Organization**: ${{ inputs.organization }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: ${{ inputs.region }}" >> $GITHUB_STEP_SUMMARY
          echo "- **State Bucket**: terraform-state-${{ inputs.project_id }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Run the Terraform Pipeline workflow to deploy infrastructure" >> $GITHUB_STEP_SUMMARY
          echo "2. Configure environment-specific variables" >> $GITHUB_STEP_SUMMARY
          echo "3. Set up monitoring and alerts" >> $GITHUB_STEP_SUMMARY