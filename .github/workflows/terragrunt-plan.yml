name: Terragrunt Plan

on:
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'infrastructure/**'
      - '.github/workflows/terragrunt-plan.yml'

env:
  TERRAFORM_VERSION: '1.5.7'
  TERRAGRUNT_VERSION: '0.52.0'
  TF_IN_AUTOMATION: 'true'

jobs:
  detect-changes:
    name: Detect Changed Environments
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.detect.outputs.environments }}
      matrix: ${{ steps.detect.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed files
        id: detect
        run: |
          # Get changed files
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '^infrastructure/' || true)
          
          # Extract unique environments
          ENVIRONMENTS=$(echo "$CHANGED_FILES" | grep -E 'infrastructure/environments/(dev|staging|prod)' | \
            sed -E 's|infrastructure/environments/([^/]+)/.*|\1|' | sort -u | tr '\n' ' ')
          
          if [ -z "$ENVIRONMENTS" ]; then
            echo "No environment changes detected"
            echo "environments=" >> $GITHUB_OUTPUT
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
          else
            echo "Changed environments: $ENVIRONMENTS"
            echo "environments=$ENVIRONMENTS" >> $GITHUB_OUTPUT
            
            # Create matrix for parallel jobs
            MATRIX_JSON="{\"include\":["
            for env in $ENVIRONMENTS; do
              MATRIX_JSON="${MATRIX_JSON}{\"environment\":\"${env}\"},"
            done
            MATRIX_JSON="${MATRIX_JSON%,}]}"
            
            echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
          fi

  terragrunt-plan:
    name: Plan ${{ matrix.environment }}
    needs: detect-changes
    if: needs.detect-changes.outputs.environments != ''
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Setup Terragrunt
        run: |
          wget -q -O /tmp/terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v${TERRAGRUNT_VERSION}/terragrunt_linux_amd64
          chmod +x /tmp/terragrunt
          sudo mv /tmp/terragrunt /usr/local/bin/terragrunt
          terragrunt --version

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Cache Terragrunt modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.terragrunt-cache
            infrastructure/**/.terragrunt-cache
          key: ${{ runner.os }}-terragrunt-${{ matrix.environment }}-${{ hashFiles('infrastructure/**/*.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terragrunt-${{ matrix.environment }}-
            ${{ runner.os }}-terragrunt-

      - name: Terragrunt Init
        working-directory: infrastructure/environments/${{ matrix.environment }}
        run: |
          terragrunt run-all init --terragrunt-non-interactive

      - name: Terragrunt Validate
        working-directory: infrastructure/environments/${{ matrix.environment }}
        run: |
          terragrunt run-all validate --terragrunt-non-interactive

      - name: Terragrunt Plan
        id: plan
        working-directory: infrastructure/environments/${{ matrix.environment }}
        run: |
          terragrunt run-all plan --terragrunt-non-interactive -out=tfplan.binary 2>&1 | tee plan_output.txt
          
          # Convert plan to JSON for better parsing
          terragrunt run-all show -json tfplan.binary > plan.json 2>/dev/null || true

      - name: Upload Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan-${{ matrix.environment }}
          path: |
            infrastructure/environments/${{ matrix.environment }}/**/*.binary
            infrastructure/environments/${{ matrix.environment }}/plan_output.txt

      - name: Comment PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const environment = '${{ matrix.environment }}';
            const planOutput = fs.readFileSync('infrastructure/environments/${{ matrix.environment }}/plan_output.txt', 'utf8');
            
            // Extract summary from plan output
            const addMatch = planOutput.match(/(\d+) to add/);
            const changeMatch = planOutput.match(/(\d+) to change/);
            const destroyMatch = planOutput.match(/(\d+) to destroy/);
            
            const adds = addMatch ? addMatch[1] : '0';
            const changes = changeMatch ? changeMatch[1] : '0';
            const destroys = destroyMatch ? destroyMatch[1] : '0';
            
            const summary = `
            ## Terragrunt Plan Summary - ${environment.toUpperCase()}
            
            | Action | Count |
            |--------|-------|
            | ‚ûï Add | ${adds} |
            | üîÑ Change | ${changes} |
            | ‚ùå Destroy | ${destroys} |
            
            <details>
            <summary>View Full Plan Output</summary>
            
            \`\`\`hcl
            ${planOutput.substring(0, 60000)}
            \`\`\`
            
            </details>
            `;
            
            // Find and update or create comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes(`Terragrunt Plan Summary - ${environment.toUpperCase()}`)
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: summary
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }

  security-scan:
    name: Security Scan
    needs: detect-changes
    if: needs.detect-changes.outputs.environments != ''
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infrastructure/
          framework: terraform
          output_format: sarif
          output_file_path: checkov.sarif
          skip_check: CKV_GCP_24,CKV_GCP_25  # Example skips

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov.sarif

  cost-estimation:
    name: Cost Estimation
    needs: detect-changes
    if: needs.detect-changes.outputs.environments != ''
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Infracost
        uses: infracost/setup-infracost@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Generate Cost Estimate
        run: |
          for env in ${{ needs.detect-changes.outputs.environments }}; do
            echo "Estimating costs for $env environment..."
            infracost breakdown \
              --path=infrastructure/environments/$env \
              --format=json \
              --out-file=/tmp/infracost-$env.json
          done
          
          # Combine all estimates
          infracost output --path="/tmp/infracost-*.json" --format=table

      - name: Comment Cost Estimate
        if: github.event_name == 'pull_request'
        run: |
          infracost comment github \
            --path="/tmp/infracost-*.json" \
            --repo=${{ github.repository }} \
            --pull-request=${{ github.event.pull_request.number }} \
            --github-token=${{ secrets.GITHUB_TOKEN }} \
            --behavior=update