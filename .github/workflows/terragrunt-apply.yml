name: Terragrunt Apply

on:
  push:
    branches:
      - main
    paths:
      - 'infrastructure/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
      auto_approve:
        description: 'Auto approve the apply'
        required: false
        type: boolean
        default: false

env:
  TERRAFORM_VERSION: '1.5.7'
  TERRAGRUNT_VERSION: '0.52.0'
  TF_IN_AUTOMATION: 'true'

jobs:
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.determine.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine environment
        id: determine
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            # For push events, detect which environment changed
            CHANGED_FILES=$(git diff --name-only HEAD~1...HEAD | grep '^infrastructure/' || true)
            
            if echo "$CHANGED_FILES" | grep -q 'infrastructure/environments/prod'; then
              echo "environment=prod" >> $GITHUB_OUTPUT
            elif echo "$CHANGED_FILES" | grep -q 'infrastructure/environments/staging'; then
              echo "environment=staging" >> $GITHUB_OUTPUT
            elif echo "$CHANGED_FILES" | grep -q 'infrastructure/environments/dev'; then
              echo "environment=dev" >> $GITHUB_OUTPUT
            else
              echo "environment=none" >> $GITHUB_OUTPUT
            fi
          fi

  terragrunt-apply:
    name: Apply ${{ needs.determine-environment.outputs.environment }}
    needs: determine-environment
    if: needs.determine-environment.outputs.environment != 'none'
    runs-on: ubuntu-latest
    environment: 
      name: ${{ needs.determine-environment.outputs.environment }}
    
    permissions:
      contents: read
      id-token: write
      issues: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Setup Terragrunt
        run: |
          wget -q -O /tmp/terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v${TERRAGRUNT_VERSION}/terragrunt_linux_amd64
          chmod +x /tmp/terragrunt
          sudo mv /tmp/terragrunt /usr/local/bin/terragrunt
          terragrunt --version

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Cache Terragrunt modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.terragrunt-cache
            infrastructure/**/.terragrunt-cache
          key: ${{ runner.os }}-terragrunt-${{ needs.determine-environment.outputs.environment }}-${{ hashFiles('infrastructure/**/*.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terragrunt-${{ needs.determine-environment.outputs.environment }}-
            ${{ runner.os }}-terragrunt-

      - name: Terragrunt Init
        working-directory: infrastructure/environments/${{ needs.determine-environment.outputs.environment }}
        run: |
          terragrunt run-all init --terragrunt-non-interactive

      - name: Terragrunt Plan
        id: plan
        working-directory: infrastructure/environments/${{ needs.determine-environment.outputs.environment }}
        run: |
          terragrunt run-all plan --terragrunt-non-interactive -out=tfplan.binary

      - name: Manual Approval Check
        if: |
          needs.determine-environment.outputs.environment == 'prod' && 
          github.event_name == 'push' &&
          github.event.inputs.auto_approve != 'true'
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: platform-team
          minimum-approvals: 1
          issue-title: "Production Deployment Approval Required"
          issue-body: |
            ## Production Deployment Approval Required
            
            **Environment:** ${{ needs.determine-environment.outputs.environment }}
            **Triggered by:** ${{ github.actor }}
            **Commit:** ${{ github.sha }}
            
            Please review the plan and approve this deployment.
            
            To approve, comment on this issue with "approved" or close it.

      - name: Terragrunt Apply
        working-directory: infrastructure/environments/${{ needs.determine-environment.outputs.environment }}
        run: |
          if [ "${{ github.event.inputs.auto_approve }}" = "true" ] || [ "${{ needs.determine-environment.outputs.environment }}" = "dev" ]; then
            terragrunt run-all apply --terragrunt-non-interactive -auto-approve
          else
            terragrunt run-all apply --terragrunt-non-interactive
          fi

      - name: Create Deployment Record
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const environment = '${{ needs.determine-environment.outputs.environment }}';
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: environment,
              required_contexts: [],
              auto_merge: false,
              production_environment: environment === 'prod'
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: `https://console.cloud.google.com/home/dashboard?project=${{ secrets.GCP_PROJECT_ID }}`,
              description: 'Deployment completed successfully'
            });

  post-deployment-tests:
    name: Post-Deployment Tests
    needs: [determine-environment, terragrunt-apply]
    if: success()
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Run Infrastructure Tests
        run: |
          ENV="${{ needs.determine-environment.outputs.environment }}"
          
          echo "Running infrastructure tests for $ENV environment..."
          
          # Test VPC connectivity
          gcloud compute networks describe ${ENV}-us-central1-vpc --project=${{ secrets.GCP_PROJECT_ID }}
          
          # Test GKE cluster (if exists)
          if gcloud container clusters describe ${ENV}-us-central1-gke --zone=us-central1 --project=${{ secrets.GCP_PROJECT_ID }} 2>/dev/null; then
            echo "GKE cluster is running"
            
            # Get cluster credentials
            gcloud container clusters get-credentials ${ENV}-us-central1-gke \
              --zone=us-central1 \
              --project=${{ secrets.GCP_PROJECT_ID }}
            
            # Check cluster nodes
            kubectl get nodes
          fi
          
          # Add more tests as needed

      - name: Notify Success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            ✅ Deployment Successful
            Environment: ${{ needs.determine-environment.outputs.environment }}
            Deployed by: ${{ github.actor }}
            Commit: ${{ github.sha }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ❌ Deployment Failed
            Environment: ${{ needs.determine-environment.outputs.environment }}
            Failed by: ${{ github.actor }}
            Commit: ${{ github.sha }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}