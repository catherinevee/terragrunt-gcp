name: Infrastructure Management

on:
  push:
    branches: [main]
    paths:
      - 'infrastructure/**'
      - '.github/workflows/**'
      - '!**.md'
  
  pull_request:
    branches: [main]
    paths:
      - 'infrastructure/**'
      - '.github/workflows/**'
      - '!**.md'
  
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC for drift detection
  
  workflow_dispatch:
    inputs:
      operation:
        description: 'Operation to perform'
        type: choice
        options:
          - validate
          - plan
          - apply
          - destroy
          - drift-check
          - setup
        default: plan
        required: true
      environment:
        description: 'Target environment'
        type: choice
        options:
          - all
          - dev
          - staging
          - prod
        default: dev
        required: true
      auto_approve:
        description: 'Auto-approve changes (use with caution)'
        type: boolean
        default: false
        required: false

concurrency:
  group: infra-${{ github.event_name }}-${{ github.event.inputs.environment || 'auto' }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  TERRAFORM_VERSION: '1.5.7'
  TERRAGRUNT_VERSION: '0.52.0'

jobs:
  # ============================================================================
  # STAGE 1: Determine what to run
  # ============================================================================
  
  router:
    name: Determine Operations
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      operation: ${{ steps.determine.outputs.operation }}
      environments: ${{ steps.determine.outputs.environments }}
      auto_approve: ${{ steps.determine.outputs.auto_approve }}
      should_validate: ${{ steps.determine.outputs.should_validate }}
      should_notify: ${{ steps.determine.outputs.should_notify }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Determine Configuration
        id: determine
        run: |
          echo "## 🎯 Operation Router" >> $GITHUB_STEP_SUMMARY
          
          # Initialize defaults
          OPERATION="plan"
          ENVIRONMENTS='["dev"]'
          AUTO_APPROVE="false"
          SHOULD_VALIDATE="true"
          SHOULD_NOTIFY="true"
          
          # Determine based on trigger
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "Trigger: Pull Request" >> $GITHUB_STEP_SUMMARY
            OPERATION="plan"
            
            # Check which environments are affected
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E "infrastructure/" || true)
            if [[ -n "$CHANGED_FILES" ]]; then
              # Check for environment-specific changes
              AFFECTED_ENVS=""
              for env in dev staging prod; do
                if echo "$CHANGED_FILES" | grep -q "infrastructure/environments/$env"; then
                  AFFECTED_ENVS="${AFFECTED_ENVS}\"$env\","
                fi
              done
              
              # If specific environments affected, use them
              if [[ -n "$AFFECTED_ENVS" ]]; then
                ENVIRONMENTS="[${AFFECTED_ENVS%,}]"
              else
                # Module changes affect dev only by default
                ENVIRONMENTS='["dev"]'
              fi
            fi
            
          elif [[ "${{ github.event_name }}" == "push" ]] && [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "Trigger: Push to main" >> $GITHUB_STEP_SUMMARY
            OPERATION="apply"
            ENVIRONMENTS='["dev"]'
            AUTO_APPROVE="true"
            
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "Trigger: Scheduled drift detection" >> $GITHUB_STEP_SUMMARY
            OPERATION="drift-check"
            ENVIRONMENTS='["dev","staging","prod"]'
            SHOULD_VALIDATE="false"
            
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Trigger: Manual dispatch" >> $GITHUB_STEP_SUMMARY
            OPERATION="${{ github.event.inputs.operation }}"
            AUTO_APPROVE="${{ github.event.inputs.auto_approve }}"
            
            if [[ "${{ github.event.inputs.environment }}" == "all" ]]; then
              ENVIRONMENTS='["dev","staging","prod"]'
            else
              ENVIRONMENTS='["${{ github.event.inputs.environment }}"]'
            fi
          fi
          
          # Special handling for setup operation
          if [[ "$OPERATION" == "setup" ]]; then
            SHOULD_VALIDATE="false"
            ENVIRONMENTS='["setup"]'
          fi
          
          # Output configuration
          echo "operation=$OPERATION" >> $GITHUB_OUTPUT
          echo "environments=$ENVIRONMENTS" >> $GITHUB_OUTPUT
          echo "auto_approve=$AUTO_APPROVE" >> $GITHUB_OUTPUT
          echo "should_validate=$SHOULD_VALIDATE" >> $GITHUB_OUTPUT
          echo "should_notify=$SHOULD_NOTIFY" >> $GITHUB_OUTPUT
          
          # Log configuration
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Operation**: $OPERATION" >> $GITHUB_STEP_SUMMARY
          echo "- **Environments**: $ENVIRONMENTS" >> $GITHUB_STEP_SUMMARY
          echo "- **Auto-approve**: $AUTO_APPROVE" >> $GITHUB_STEP_SUMMARY
          echo "- **Validate**: $SHOULD_VALIDATE" >> $GITHUB_STEP_SUMMARY
          echo "- **Notify**: $SHOULD_NOTIFY" >> $GITHUB_STEP_SUMMARY
  
  # ============================================================================
  # STAGE 2: Validation (optional)
  # ============================================================================
  
  validate:
    name: Validate Infrastructure
    needs: router
    if: needs.router.outputs.should_validate == 'true' && needs.router.outputs.operation != 'setup'
    uses: ./.github/workflows/reusable-validation.yml
    with:
      environment: ${{ contains(needs.router.outputs.environments, 'prod') && 'prod' || 'dev' }}
      run_security_scan: true
      run_cost_estimate: ${{ github.event_name == 'pull_request' }}
      terraform_version: '1.5.7'
      terragrunt_version: '0.52.0'
    secrets: inherit
  
  # ============================================================================
  # STAGE 3: Main Operations
  # ============================================================================
  
  # Terraform operations (plan, apply, destroy)
  terraform:
    name: Terraform ${{ needs.router.outputs.operation }}
    needs: [router, validate]
    if: |
      always() &&
      needs.router.result == 'success' &&
      (needs.validate.result == 'success' || needs.validate.result == 'skipped') &&
      contains(fromJson('["plan","apply","destroy"]'), needs.router.outputs.operation)
    strategy:
      matrix:
        environment: ${{ fromJson(needs.router.outputs.environments) }}
      max-parallel: ${{ needs.router.outputs.operation == 'destroy' && 1 || 3 }}
      fail-fast: false
    uses: ./.github/workflows/reusable-terraform.yml
    with:
      operation: ${{ needs.router.outputs.operation }}
      environment: ${{ matrix.environment }}
      auto_approve: ${{ fromJson(needs.router.outputs.auto_approve) }}
      terraform_version: '1.5.7'
      terragrunt_version: '0.52.0'
    secrets: inherit
  
  # Drift detection
  drift:
    name: Drift Detection
    needs: [router, validate]
    if: |
      always() &&
      needs.router.result == 'success' &&
      (needs.validate.result == 'success' || needs.validate.result == 'skipped') &&
      needs.router.outputs.operation == 'drift-check'
    strategy:
      matrix:
        environment: ${{ fromJson(needs.router.outputs.environments) }}
      fail-fast: false
    uses: ./.github/workflows/reusable-drift.yml
    with:
      environment: ${{ matrix.environment }}
      auto_remediate: false
      create_issue: true
      terraform_version: '1.5.7'
      terragrunt_version: '0.52.0'
    secrets: inherit
  
  # Setup infrastructure (special case)
  setup:
    name: Setup Infrastructure
    needs: router
    if: needs.router.outputs.operation == 'setup'
    uses: ./.github/workflows/setup-infrastructure.yml
    secrets: inherit
  
  # Simple validation-only operation
  validate-only:
    name: Validation Only
    needs: [router, validate]
    if: |
      needs.router.outputs.operation == 'validate' &&
      needs.validate.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Validation Complete
        run: |
          echo "## ✅ Validation Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Infrastructure validation passed successfully." >> $GITHUB_STEP_SUMMARY
  
  # ============================================================================
  # STAGE 4: Notifications
  # ============================================================================
  
  notify-success:
    name: Notify Success
    needs: [router, terraform, drift, setup, validate-only]
    if: |
      always() &&
      needs.router.outputs.should_notify == 'true' &&
      (needs.terraform.result == 'success' || 
       needs.drift.result == 'success' || 
       needs.setup.result == 'success' ||
       needs.validate-only.result == 'success')
    uses: ./.github/workflows/reusable-notifications.yml
    with:
      status: 'success'
      operation: ${{ needs.router.outputs.operation }}
      environment: ${{ join(fromJson(needs.router.outputs.environments), ', ') }}
      details: 'Operation completed successfully'
      notify_slack: true
      create_issue: false
    secrets: inherit
  
  notify-failure:
    name: Notify Failure
    needs: [router, validate, terraform, drift, setup]
    if: |
      always() &&
      needs.router.outputs.should_notify == 'true' &&
      (needs.validate.result == 'failure' ||
       needs.terraform.result == 'failure' || 
       needs.drift.result == 'failure' || 
       needs.setup.result == 'failure')
    uses: ./.github/workflows/reusable-notifications.yml
    with:
      status: 'failure'
      operation: ${{ needs.router.outputs.operation }}
      environment: ${{ join(fromJson(needs.router.outputs.environments), ', ') }}
      details: 'Operation failed - check logs for details'
      notify_slack: true
      create_issue: ${{ github.event_name != 'pull_request' }}
    secrets: inherit
  
  # ============================================================================
  # STAGE 5: Summary
  # ============================================================================
  
  summary:
    name: Pipeline Summary
    needs: [router, validate, terraform, drift, setup, notify-success, notify-failure]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Generate Summary
        run: |
          echo "# 📊 Infrastructure Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Execution Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Operation**: ${{ needs.router.outputs.operation }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environments**: ${{ join(fromJson(needs.router.outputs.environments), ', ') }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Actor**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ID**: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Router | ${{ needs.router.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Validate | ${{ needs.validate.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Terraform | ${{ needs.terraform.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Drift | ${{ needs.drift.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Setup | ${{ needs.setup.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "## ❌ Pipeline Failed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "## ⚠️ Pipeline Cancelled" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ✅ Pipeline Succeeded" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Generated at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")*" >> $GITHUB_STEP_SUMMARY