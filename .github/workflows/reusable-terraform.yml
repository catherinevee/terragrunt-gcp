name: Reusable Terraform Operations

on:
  workflow_call:
    inputs:
      operation:
        description: 'Terraform operation to perform'
        type: string
        required: true
      environment:
        description: 'Target environment'
        type: string
        required: true
      auto_approve:
        description: 'Auto-approve changes'
        type: boolean
        default: false
      working_directory:
        description: 'Working directory'
        type: string
        default: 'infrastructure/environments'
      terraform_version:
        description: 'Terraform version'
        type: string
        default: '1.5.7'
      terragrunt_version:
        description: 'Terragrunt version'
        type: string
        default: '0.52.0'
      parallelism:
        description: 'Terragrunt parallelism'
        type: number
        default: 4
    outputs:
      plan_summary:
        description: 'Summary of terraform plan'
        value: ${{ jobs.terraform.outputs.plan_summary }}
      apply_result:
        description: 'Result of apply operation'
        value: ${{ jobs.terraform.outputs.apply_result }}
    secrets:
      GCP_PROJECT_ID:
        required: false
      GCP_SERVICE_ACCOUNT_KEY:
        required: false
      WIF_PROVIDER:
        required: false
      WIF_SERVICE_ACCOUNT:
        required: false
      STATE_BUCKET:
        required: false

env:
  TF_IN_AUTOMATION: 'true'
  TERRAGRUNT_NON_INTERACTIVE: 'true'

jobs:
  terraform:
    name: Terraform ${{ inputs.operation }} - ${{ inputs.environment }}
    runs-on: ubuntu-latest
    timeout-minutes: ${{ contains(inputs.operation, 'apply') || contains(inputs.operation, 'destroy') && 60 || 30 }}
    outputs:
      plan_summary: ${{ steps.plan.outputs.summary }}
      apply_result: ${{ steps.apply.outputs.result }}
    
    environment:
      name: ${{ inputs.environment }}
      url: https://console.cloud.google.com/home/dashboard?project=${{ secrets.GCP_PROJECT_ID }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Environment
        uses: ./.github/actions/setup-environment
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terragrunt_version: ${{ inputs.terragrunt_version }}
          working_directory: ${{ inputs.working_directory }}/${{ inputs.environment }}
          gcp_auth_method: ${{ secrets.WIF_PROVIDER && 'workload-identity' || 'service-account' }}
          gcp_service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          gcp_workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          gcp_service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          cache_key_prefix: terragrunt-${{ inputs.environment }}
      
      - name: Terragrunt Init
        working-directory: ${{ inputs.working_directory }}/${{ inputs.environment }}
        run: |
          terragrunt run-all init \
            --terragrunt-non-interactive \
            --terragrunt-parallelism ${{ inputs.parallelism }}
      
      - name: Terragrunt Validate
        if: inputs.operation == 'validate'
        working-directory: ${{ inputs.working_directory }}/${{ inputs.environment }}
        run: |
          terragrunt run-all validate \
            --terragrunt-non-interactive \
            --terragrunt-parallelism ${{ inputs.parallelism }}
      
      - name: Terragrunt Plan
        id: plan
        if: inputs.operation == 'plan' || inputs.operation == 'plan-destroy'
        working-directory: ${{ inputs.working_directory }}/${{ inputs.environment }}
        run: |
          if [[ "${{ inputs.operation }}" == "plan-destroy" ]]; then
            PLAN_ARGS="-destroy"
          else
            PLAN_ARGS=""
          fi
          
          # Run plan and capture output
          terragrunt run-all plan $PLAN_ARGS \
            --terragrunt-non-interactive \
            --terragrunt-parallelism ${{ inputs.parallelism }} \
            -out=tfplan.binary 2>&1 | tee plan_output.txt
          
          # Generate summary
          if [ -f plan_output.txt ]; then
            ADD=$(grep -E '[0-9]+ to add' plan_output.txt | grep -oE '[0-9]+' | head -1 || echo "0")
            CHANGE=$(grep -E '[0-9]+ to change' plan_output.txt | grep -oE '[0-9]+' | head -1 || echo "0")
            DESTROY=$(grep -E '[0-9]+ to destroy' plan_output.txt | grep -oE '[0-9]+' | head -1 || echo "0")
            
            SUMMARY="Add: $ADD, Change: $CHANGE, Destroy: $DESTROY"
            echo "summary=$SUMMARY" >> $GITHUB_OUTPUT
            
            # Add to GitHub summary
            echo "## Terraform Plan Summary - ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
            echo "- Resources to add: $ADD" >> $GITHUB_STEP_SUMMARY
            echo "- Resources to change: $CHANGE" >> $GITHUB_STEP_SUMMARY
            echo "- Resources to destroy: $DESTROY" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Manual Approval Check
        if: |
          (inputs.operation == 'apply' || inputs.operation == 'destroy') &&
          inputs.environment == 'prod' &&
          inputs.auto_approve != true
        run: |
          echo "::error::Production changes require manual approval. Set auto_approve=true after review."
          exit 1
      
      - name: Terragrunt Apply
        id: apply
        if: inputs.operation == 'apply'
        working-directory: ${{ inputs.working_directory }}/${{ inputs.environment }}
        run: |
          APPLY_ARGS=""
          if [[ "${{ inputs.auto_approve }}" == "true" ]]; then
            APPLY_ARGS="-auto-approve"
          fi
          
          terragrunt run-all apply $APPLY_ARGS \
            --terragrunt-non-interactive \
            --terragrunt-parallelism ${{ inputs.parallelism }}
          
          echo "result=success" >> $GITHUB_OUTPUT
          echo "✅ Apply completed successfully" >> $GITHUB_STEP_SUMMARY
      
      - name: Terragrunt Destroy
        if: inputs.operation == 'destroy'
        working-directory: ${{ inputs.working_directory }}/${{ inputs.environment }}
        run: |
          # Extra safety for production
          if [[ "${{ inputs.environment }}" == "prod" ]] && [[ "${{ inputs.auto_approve }}" != "true" ]]; then
            echo "::error::Production destruction requires explicit auto_approve=true"
            exit 1
          fi
          
          DESTROY_ARGS=""
          if [[ "${{ inputs.auto_approve }}" == "true" ]]; then
            DESTROY_ARGS="-auto-approve"
          fi
          
          terragrunt run-all destroy $DESTROY_ARGS \
            --terragrunt-non-interactive \
            --terragrunt-parallelism ${{ inputs.parallelism }}
          
          echo "⚠️ Resources destroyed in ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
      
      - name: Upload Plan Artifacts
        if: always() && (inputs.operation == 'plan' || inputs.operation == 'plan-destroy')
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ inputs.environment }}-${{ github.run_id }}
          path: |
            ${{ inputs.working_directory }}/${{ inputs.environment }}/**/*.tfplan
            ${{ inputs.working_directory }}/${{ inputs.environment }}/**/plan_output.txt
          retention-days: 7