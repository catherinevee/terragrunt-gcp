name: Terragrunt Destroy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
      confirm_destroy:
        description: 'Type the environment name to confirm destruction'
        required: true
        type: string
      resources:
        description: 'Specific resources to destroy (leave empty for all)'
        required: false
        type: string
        default: ''

env:
  TERRAFORM_VERSION: '1.5.7'
  TERRAGRUNT_VERSION: '0.52.0'
  TF_IN_AUTOMATION: 'true'

jobs:
  validate-destruction:
    name: Validate Destruction Request
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.validate.outputs.proceed }}
    steps:
      - name: Validate confirmation
        id: validate
        run: |
          if [ "${{ github.event.inputs.environment }}" != "${{ github.event.inputs.confirm_destroy }}" ]; then
            echo "‚ùå Confirmation does not match environment name"
            echo "proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          if [ "${{ github.event.inputs.environment }}" = "prod" ]; then
            echo "‚ö†Ô∏è  Production destruction requested - requiring additional approval"
          fi
          
          echo "proceed=true" >> $GITHUB_OUTPUT

  approval:
    name: Approval Required
    needs: validate-destruction
    if: |
      needs.validate-destruction.outputs.proceed == 'true' &&
      github.event.inputs.environment == 'prod'
    runs-on: ubuntu-latest
    environment:
      name: prod-destroy
    steps:
      - name: Request approval
        run: |
          echo "üî¥ PRODUCTION DESTRUCTION APPROVAL REQUIRED"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Requested by: ${{ github.actor }}"
          echo "This action will DESTROY all resources in production!"

  terragrunt-destroy:
    name: Destroy ${{ github.event.inputs.environment }}
    needs: [validate-destruction, approval]
    if: |
      always() &&
      needs.validate-destruction.outputs.proceed == 'true' &&
      (needs.approval.result == 'success' || needs.approval.result == 'skipped')
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment }}
    
    permissions:
      contents: read
      id-token: write
      issues: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Setup Terragrunt
        run: |
          wget -q -O /tmp/terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v${TERRAGRUNT_VERSION}/terragrunt_linux_amd64
          chmod +x /tmp/terragrunt
          sudo mv /tmp/terragrunt /usr/local/bin/terragrunt
          terragrunt --version

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Create backup
        run: |
          echo "Creating state backup before destruction..."
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BACKUP_BUCKET="${{ secrets.BACKUP_BUCKET }}"
          ENV="${{ github.event.inputs.environment }}"
          
          # Create backup of current state
          gsutil -m cp -r \
            gs://${{ secrets.STATE_BUCKET }}/infrastructure/environments/${ENV}/* \
            gs://${BACKUP_BUCKET}/state-backups/${ENV}/${TIMESTAMP}/ || true
          
          echo "State backed up to: gs://${BACKUP_BUCKET}/state-backups/${ENV}/${TIMESTAMP}/"

      - name: Terragrunt Init
        working-directory: infrastructure/environments/${{ github.event.inputs.environment }}
        run: |
          terragrunt run-all init --terragrunt-non-interactive

      - name: Plan Destruction
        id: plan
        working-directory: infrastructure/environments/${{ github.event.inputs.environment }}
        run: |
          if [ -n "${{ github.event.inputs.resources }}" ]; then
            # Destroy specific resources
            for resource in ${{ github.event.inputs.resources }}; do
              echo "Planning destruction of: $resource"
              cd $resource
              terragrunt plan -destroy --terragrunt-non-interactive -out=destroy.tfplan
              cd ..
            done
          else
            # Destroy all resources
            terragrunt run-all plan -destroy --terragrunt-non-interactive -out=destroy.tfplan
          fi

      - name: Show Destruction Plan
        working-directory: infrastructure/environments/${{ github.event.inputs.environment }}
        run: |
          echo "### Resources to be destroyed ###"
          if [ -n "${{ github.event.inputs.resources }}" ]; then
            for resource in ${{ github.event.inputs.resources }}; do
              echo "Resource: $resource"
              cd $resource
              terragrunt show destroy.tfplan
              cd ..
            done
          else
            terragrunt run-all show destroy.tfplan
          fi

      - name: Final Confirmation
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: platform-team
          minimum-approvals: 2
          issue-title: "‚ö†Ô∏è FINAL DESTRUCTION APPROVAL - ${{ github.event.inputs.environment }}"
          issue-body: |
            ## ‚ö†Ô∏è FINAL DESTRUCTION APPROVAL REQUIRED
            
            **THIS IS THE FINAL CONFIRMATION BEFORE DESTRUCTION**
            
            **Environment:** ${{ github.event.inputs.environment }}
            **Requested by:** ${{ github.actor }}
            **Resources:** ${{ github.event.inputs.resources || 'ALL RESOURCES' }}
            
            ‚ö†Ô∏è **WARNING:** This action is IRREVERSIBLE and will DESTROY infrastructure!
            
            State has been backed up to: `gs://${{ secrets.BACKUP_BUCKET }}/state-backups/`
            
            To approve destruction, at least 2 team members must approve this issue.

      - name: Execute Destruction
        working-directory: infrastructure/environments/${{ github.event.inputs.environment }}
        run: |
          echo "üî¥ EXECUTING DESTRUCTION for ${{ github.event.inputs.environment }} environment"
          
          if [ -n "${{ github.event.inputs.resources }}" ]; then
            # Destroy specific resources in reverse order
            RESOURCES="${{ github.event.inputs.resources }}"
            for resource in $(echo $RESOURCES | tr ' ' '\n' | tac); do
              echo "Destroying: $resource"
              cd $resource
              terragrunt destroy --terragrunt-non-interactive -auto-approve
              cd ..
            done
          else
            # Destroy all resources
            terragrunt run-all destroy --terragrunt-non-interactive -auto-approve
          fi

      - name: Verify Destruction
        run: |
          echo "Verifying resource destruction..."
          ENV="${{ github.event.inputs.environment }}"
          
          # Check if major resources still exist
          echo "Checking for remaining resources..."
          
          # Check VPC
          if gcloud compute networks describe ${ENV}-us-central1-vpc --project=${{ secrets.GCP_PROJECT_ID }} 2>/dev/null; then
            echo "‚ö†Ô∏è WARNING: VPC still exists!"
          else
            echo "‚úÖ VPC destroyed"
          fi
          
          # Check GKE
          if gcloud container clusters describe ${ENV}-us-central1-gke --zone=us-central1 --project=${{ secrets.GCP_PROJECT_ID }} 2>/dev/null; then
            echo "‚ö†Ô∏è WARNING: GKE cluster still exists!"
          else
            echo "‚úÖ GKE cluster destroyed"
          fi
          
          # List remaining resources
          echo "Remaining compute instances:"
          gcloud compute instances list --project=${{ secrets.GCP_PROJECT_ID }} --filter="name:${ENV}-*"
          
          echo "Remaining storage buckets:"
          gsutil ls -p ${{ secrets.GCP_PROJECT_ID }} | grep "${ENV}-" || echo "No buckets found"

      - name: Create Destruction Record
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Infrastructure Destroyed: ${{ github.event.inputs.environment }}`,
              body: `
              ## Infrastructure Destruction Record
              
              **Environment:** ${{ github.event.inputs.environment }}
              **Destroyed by:** ${{ github.actor }}
              **Date:** ${new Date().toISOString()}
              **Resources:** ${{ github.event.inputs.resources || 'ALL' }}
              **Status:** ${{ job.status }}
              
              **State Backup Location:** 
              \`gs://${{ secrets.BACKUP_BUCKET }}/state-backups/${{ github.event.inputs.environment }}/\`
              
              **Commit:** ${{ github.sha }}
              **Workflow Run:** ${{ github.run_id }}
              `,
              labels: ['infrastructure', 'destruction', '${{ github.event.inputs.environment }}']
            });

      - name: Notify Destruction
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            üî¥ Infrastructure Destruction ${{ job.status == 'success' && 'Completed' || 'Failed' }}
            Environment: ${{ github.event.inputs.environment }}
            Resources: ${{ github.event.inputs.resources || 'ALL' }}
            Destroyed by: ${{ github.actor }}
            Status: ${{ job.status }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}