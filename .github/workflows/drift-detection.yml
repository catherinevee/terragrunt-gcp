name: Drift Detection

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to check for drift'
        required: false
        type: choice
        options:
          - all
          - dev
          - staging
          - prod
        default: all
      auto_remediate:
        description: 'Automatically fix drift if detected'
        required: false
        type: boolean
        default: false

concurrency:
  group: drift-detection-${{ github.event.inputs.environment || 'all' }}
  cancel-in-progress: false

env:
  TERRAFORM_VERSION: '1.5.7'
  TERRAGRUNT_VERSION: '0.52.0'

jobs:
  detect-drift:
    name: Detect Drift - ${{ matrix.environment }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        environment: ${{ fromJson(github.event.inputs.environment == 'all' && '["dev", "staging", "prod"]' || format('["{0}"]', github.event.inputs.environment)) }}
      fail-fast: false
    
    outputs:
      drift_detected_dev: ${{ steps.drift.outputs.drift_detected_dev }}
      drift_detected_staging: ${{ steps.drift.outputs.drift_detected_staging }}
      drift_detected_prod: ${{ steps.drift.outputs.drift_detected_prod }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform and Terragrunt
        uses: ./.github/actions/setup-terraform
        with:
          terraform-version: ${{ env.TERRAFORM_VERSION }}
          terragrunt-version: ${{ env.TERRAGRUNT_VERSION }}

      - name: Setup GCP Authentication
        uses: ./.github/actions/setup-gcp
        with:
          auth-method: ${{ secrets.WIF_PROVIDER && 'workload-identity' || 'service-account' }}
          wif-provider: ${{ secrets.WIF_PROVIDER }}
          wif-service-account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          service-account-key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project-id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Setup Terragrunt Cache
        uses: ./.github/actions/terragrunt-cache
        with:
          environment: ${{ matrix.environment }}

      - name: Terragrunt Init
        working-directory: infrastructure/environments/${{ matrix.environment }}
        run: |
          export TF_IN_AUTOMATION=true
          terragrunt run-all init --terragrunt-non-interactive \
            --terragrunt-parallelism 4

      - name: Detect Drift
        id: drift
        working-directory: infrastructure/environments/${{ matrix.environment }}
        run: |
          export TF_IN_AUTOMATION=true
          
          echo "Checking for drift in ${{ matrix.environment }} environment..."
          
          # Run plan and capture output
          if terragrunt run-all plan --terragrunt-non-interactive \
            --terragrunt-parallelism 4 \
            -detailed-exitcode \
            -out=drift.tfplan 2>&1 | tee drift_output.txt; then
            EXITCODE=${PIPESTATUS[0]}
          else
            EXITCODE=$?
          fi
          
          # Exit codes: 0 = no changes, 1 = error, 2 = changes present
          if [ $EXITCODE -eq 2 ]; then
            echo "⚠️ DRIFT DETECTED in ${{ matrix.environment }}"
            echo "drift_detected_${{ matrix.environment }}=true" >> $GITHUB_OUTPUT
            
            # Extract drift summary
            ADD=$(grep -E '[0-9]+ to add' drift_output.txt | grep -oE '[0-9]+' | head -1 || echo "0")
            CHANGE=$(grep -E '[0-9]+ to change' drift_output.txt | grep -oE '[0-9]+' | head -1 || echo "0")
            DESTROY=$(grep -E '[0-9]+ to destroy' drift_output.txt | grep -oE '[0-9]+' | head -1 || echo "0")
            
            echo "Resources to add: $ADD"
            echo "Resources to change: $CHANGE"
            echo "Resources to destroy: $DESTROY"
            
            # Create drift report
            cat > drift_report.md << EOF
          # Drift Detection Report - ${{ matrix.environment }}
          
          **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Environment:** ${{ matrix.environment }}
          **Status:** ⚠️ Drift Detected
          
          ## Summary
          - Resources to add: $ADD
          - Resources to change: $CHANGE
          - Resources to destroy: $DESTROY
          
          ## Details
          \`\`\`
          $(cat drift_output.txt | head -500)
          \`\`\`
          EOF
            
          elif [ $EXITCODE -eq 0 ]; then
            echo "✅ No drift detected in ${{ matrix.environment }}"
            echo "drift_detected_${{ matrix.environment }}=false" >> $GITHUB_OUTPUT
          else
            echo "❌ Error checking drift in ${{ matrix.environment }}"
            echo "drift_detected_${{ matrix.environment }}=error" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Upload Drift Report
        if: steps.drift.outputs[format('drift_detected_{0}', matrix.environment)] == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: drift-report-${{ matrix.environment }}-${{ github.run_id }}
          path: |
            infrastructure/environments/${{ matrix.environment }}/drift_report.md
            infrastructure/environments/${{ matrix.environment }}/drift_output.txt
            infrastructure/environments/${{ matrix.environment }}/drift.tfplan
          retention-days: 30

      - name: Create GitHub Issue for Drift
        if: steps.drift.outputs[format('drift_detected_{0}', matrix.environment)] == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const environment = '${{ matrix.environment }}';
            const reportPath = `infrastructure/environments/${environment}/drift_report.md`;
            
            let reportContent = '⚠️ Drift detected in infrastructure';
            try {
              reportContent = fs.readFileSync(reportPath, 'utf8');
            } catch (e) {
              console.log('Could not read drift report:', e);
            }
            
            // Check for existing open issue
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['drift-detection', environment]
            });
            
            if (issues.length === 0) {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🔍 Drift Detected in ${environment.toUpperCase()} Environment`,
                body: reportContent + `\n\n**Run ID:** ${context.runId}\n**Run URL:** ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
                labels: ['drift-detection', environment, 'infrastructure']
              });
            } else {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues[0].number,
                body: `## Updated Drift Detection\n\n${reportContent}\n\n**Run ID:** ${context.runId}`
              });
            }

  auto-remediate:
    name: Auto-Remediate Drift
    needs: detect-drift
    if: |
      github.event.inputs.auto_remediate == 'true' &&
      (needs.detect-drift.outputs.drift_detected_dev == 'true' ||
       needs.detect-drift.outputs.drift_detected_staging == 'true' ||
       needs.detect-drift.outputs.drift_detected_prod == 'true')
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      matrix:
        environment: ${{ fromJson(github.event.inputs.environment == 'all' && '["dev", "staging", "prod"]' || format('["{0}"]', github.event.inputs.environment)) }}
      fail-fast: false
    
    steps:
      - name: Check if remediation needed
        id: check
        run: |
          DRIFT_STATUS="${{ needs.detect-drift.outputs[format('drift_detected_{0}', matrix.environment)] }}"
          if [ "$DRIFT_STATUS" = "true" ]; then
            echo "needs_remediation=true" >> $GITHUB_OUTPUT
          else
            echo "needs_remediation=false" >> $GITHUB_OUTPUT
          fi

      - name: Checkout
        if: steps.check.outputs.needs_remediation == 'true'
        uses: actions/checkout@v4

      - name: Manual Approval for Production
        if: steps.check.outputs.needs_remediation == 'true' && matrix.environment == 'prod'
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: platform-team
          minimum-approvals: 1
          issue-title: "Production Drift Auto-Remediation Approval"
          issue-body: |
            ## Production Drift Auto-Remediation Required
            
            Drift has been detected in production. Auto-remediation will apply the following changes:
            
            **Environment:** ${{ matrix.environment }}
            **Run ID:** ${{ github.run_id }}
            
            Please review and approve to proceed with auto-remediation.

      - name: Apply Remediation
        if: steps.check.outputs.needs_remediation == 'true'
        uses: ./.github/workflows/reusable-terragrunt-apply.yml
        with:
          environment: ${{ matrix.environment }}
          auto-approve: true
          terraform-version: ${{ env.TERRAFORM_VERSION }}
          terragrunt-version: ${{ env.TERRAGRUNT_VERSION }}
        secrets:
          wif-provider: ${{ secrets.WIF_PROVIDER }}
          wif-service-account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          gcp-service-account-key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          gcp-project-id: ${{ secrets.GCP_PROJECT_ID }}
          slack-webhook: ${{ secrets.SLACK_WEBHOOK }}

  drift-summary:
    name: Drift Detection Summary
    needs: [detect-drift, auto-remediate]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Generate Summary Report
        run: |
          echo "## 🔍 Drift Detection Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Run Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name == 'schedule' && 'Scheduled Run' || github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Environment Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | Drift Status | Remediation |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------------|-------------|" >> $GITHUB_STEP_SUMMARY
          
          for env in dev staging prod; do
            DRIFT_STATUS="${{ needs.detect-drift.outputs[format('drift_detected_{0}', env)] }}"
            if [ "$DRIFT_STATUS" = "true" ]; then
              STATUS="⚠️ Drift Detected"
              REMEDIATION="${{ github.event.inputs.auto_remediate == 'true' && '✅ Applied' || '⏸️ Manual Required' }}"
            elif [ "$DRIFT_STATUS" = "false" ]; then
              STATUS="✅ In Sync"
              REMEDIATION="N/A"
            elif [ "$DRIFT_STATUS" = "error" ]; then
              STATUS="❌ Error"
              REMEDIATION="N/A"
            else
              STATUS="⏭️ Skipped"
              REMEDIATION="N/A"
            fi
            echo "| ${env} | ${STATUS} | ${REMEDIATION} |" >> $GITHUB_STEP_SUMMARY
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event.inputs.auto_remediate }}" != "true" ]; then
            echo "- Review drift reports in GitHub Issues" >> $GITHUB_STEP_SUMMARY
            echo "- Manually apply changes or enable auto-remediation" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Verify auto-remediation was successful" >> $GITHUB_STEP_SUMMARY
            echo "- Review any remaining drift issues" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Send Slack Notification
        if: always() && secrets.SLACK_WEBHOOK
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "Drift Detection Complete",
              attachments: [{
                color: "${{ contains(needs.detect-drift.outputs, 'true') && 'warning' || 'good' }}",
                title: "Infrastructure Drift Detection",
                fields: [
                  { title: "Dev", value: "${{ needs.detect-drift.outputs.drift_detected_dev || 'Not checked' }}", short: true },
                  { title: "Staging", value: "${{ needs.detect-drift.outputs.drift_detected_staging || 'Not checked' }}", short: true },
                  { title: "Prod", value: "${{ needs.detect-drift.outputs.drift_detected_prod || 'Not checked' }}", short: true },
                  { title: "Auto-Remediate", value: "${{ github.event.inputs.auto_remediate || 'false' }}", short: true }
                ]
              }]
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}